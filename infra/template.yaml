AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Serverless Text-to-Speech (S3 Static Website + API Gateway HTTP API + Lambda + Polly + Private Audio Bucket)

Parameters:
  UrlTtlSeconds:
    Type: Number
    Default: 3600
    Description: Pre-signed URL expiry (seconds)
  DefaultVoiceId:
    Type: String
    Default: Amy
    Description: Default Amazon Polly VoiceId (UI can override)

Resources:

  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: tts-web-sfh-tts-2025-09
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${WebBucket}/*

  AudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: tts-audio-sfh-tts-2025-09
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: expire-1d
            Status: Enabled
            ExpirationInDays: 1

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: tts-s3-polly
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:HeadObject
                Resource:
                  - !Sub arn:aws:s3:::${AudioBucket}/*
              - Effect: Allow
                Action:
                  - polly:SynthesizeSpeech
                Resource: "*"

  TtsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub tts-svc-${AWS::StackName}
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.12
      Handler: index.lambda_handler
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          AUDIO_BUCKET: !Ref AudioBucket
          URL_TTL_SECONDS: !Ref UrlTtlSeconds
          DEFAULT_VOICE_ID: !Ref DefaultVoiceId
      Code:
        ZipFile: |
          import json, os, hashlib, boto3, botocore

          s3 = boto3.client('s3')
          polly = boto3.client('polly')

          AUDIO_BUCKET = os.environ.get('AUDIO_BUCKET')
          URL_TTL = int(os.environ.get('URL_TTL_SECONDS', '3600'))
          DEFAULT_VOICE = os.environ.get('DEFAULT_VOICE_ID', 'Amy')

          def _resp(status, body):
              return {
                  "statusCode": status,
                  "headers": {
                      "Content-Type": "application/json",
                      "Access-Control-Allow-Origin": "*"
                  },
                  "body": json.dumps(body)
              }

          def lambda_handler(event, context):
              try:
                  body = event.get("body") if isinstance(event, dict) else None
                  if isinstance(body, str):
                      body = json.loads(body)
                  elif body is None and isinstance(event, dict):
                      body = event

                  text = (body.get("text") or "").strip()
                  voice = (body.get("voiceId") or DEFAULT_VOICE).strip()
                  pitch = str(body.get("pitch", "1")).strip()
                  speed = str(body.get("speed", "1")).strip()

                  if not text:
                      return _resp(400, {"error": "Missing 'text'."})
                  if len(text) > 1500:
                      return _resp(400, {"error": "Text too long. Keep under ~1500 characters."})

                  # Stable S3 key
                  key = f"mp3/{voice}/{hashlib.sha256((voice + '|' + text + pitch + speed).encode('utf-8')).hexdigest()}.mp3"

                  # Cache check
                  try:
                      s3.head_object(Bucket=AUDIO_BUCKET, Key=key)
                      url = s3.generate_presigned_url("get_object",
                                                      Params={"Bucket": AUDIO_BUCKET, "Key": key},
                                                      ExpiresIn=URL_TTL)
                      return _resp(200, {"url": url, "key": key, "cached": True, "chars": len(text)})
                  except botocore.exceptions.ClientError as e:
                      if e.response.get("Error", {}).get("Code") not in ("404", "NoSuchKey", "NotFound"):
                          raise

                  # SSML with pitch & speed
                  ssml_text = f'<speak><prosody rate="{float(speed)*100:.0f}%" pitch="{float(pitch)*100:.0f}%">{text}</prosody></speak>'

                  # Synthesize
                  polly_resp = polly.synthesize_speech(
                      Engine="standard",
                      OutputFormat="mp3",
                      VoiceId=voice,
                      TextType="ssml",
                      Text=ssml_text
                  )
                  audio_bytes = polly_resp["AudioStream"].read()

                  s3.put_object(Bucket=AUDIO_BUCKET, Key=key, Body=audio_bytes, ContentType="audio/mpeg")

                  url = s3.generate_presigned_url("get_object",
                                                  Params={"Bucket": AUDIO_BUCKET, "Key": key},
                                                  ExpiresIn=URL_TTL)
                  return _resp(200, {"url": url, "key": key, "cached": False, "chars": len(text)})
              except Exception as e:
                  return _resp(500, {"error": str(e)})

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub tts-api-${AWS::StackName}
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['POST','OPTIONS']
        AllowHeaders: ['content-type']
        MaxAge: 3600

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TtsLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*

  HttpIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TtsLambda.Arn}/invocations
      PayloadFormatVersion: '2.0'

  SpeakRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /speak'
      Target: !Sub integrations/${HttpIntegration}

  DefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: '$default'
      AutoDeploy: true

Outputs:
  ApiInvokeUrl:
    Description: Base Invoke URL (no trailing slash)
    Value: !Sub https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com
  WebBucketWebsiteURL:
    Description: S3 static website endpoint
    Value: !GetAtt WebBucket.WebsiteURL
  AudioBucketName:
    Value: !Ref AudioBucket
